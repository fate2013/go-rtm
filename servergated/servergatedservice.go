// Autogenerated by Thrift Compiler (1.0.0-dev)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package servergated

import (
	"bytes"
	"fmt"
	"fate2013/go-rtm/fp1225"
	"git.apache.org/thrift.git/lib/go/thrift"
	"fate2013/go-rtm/rtmcommon"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = fp1225.GoUnusedProtection__
var _ = rtmcommon.GoUnusedProtection__

type ServerGatedService interface {
	fp1225.FunplusService

	// Parameters:
	//  - ProjectId
	//  - Key
	//  - Mtype
	//  - From
	//  - To
	//  - Mid
	//  - Message
	SendMsg(project_id int32, key string, mtype int8, from int64, to int64, mid int64, message string) (r int32, err error)
	// Parameters:
	//  - ProjectId
	//  - Key
	//  - Mtype
	//  - From
	//  - Tos
	//  - Mid
	//  - Message
	SendMsgs(project_id int32, key string, mtype int8, from int64, tos []int64, mid int64, message string) (r int32, err error)
	// Parameters:
	//  - ProjectId
	//  - Key
	//  - Mtype
	//  - From
	//  - GroupId
	//  - Mid
	//  - Message
	SendGroupMsg(project_id int32, key string, mtype int8, from int64, group_id int64, mid int64, message string) (r int32, err error)
	// Parameters:
	//  - ProjectId
	//  - Key
	//  - Mtype
	//  - From
	//  - Mid
	//  - Message
	BroadcastMsg(project_id int32, key string, mtype int8, from int64, mid int64, message string) (r int32, err error)
	// Parameters:
	//  - ProjectId
	//  - Key
	//  - Mtype
	//  - From
	//  - Message
	BroadcastNote(project_id int32, key string, mtype int8, from int64, message string) (err error)
	// Parameters:
	//  - ProjectId
	//  - Key
	//  - Mtype
	//  - From
	//  - To
	//  - Message
	SendNote(project_id int32, key string, mtype int8, from int64, to int64, message string) (err error)
	// Parameters:
	//  - ProjectId
	//  - Key
	//  - Mtype
	//  - From
	//  - Tos
	//  - Message
	SendNotes(project_id int32, key string, mtype int8, from int64, tos []int64, message string) (err error)
	// Parameters:
	//  - ProjectId
	//  - Key
	//  - Mtype
	//  - From
	//  - GroupId
	//  - Message
	SendGroupNote(project_id int32, key string, mtype int8, from int64, group_id int64, message string) (err error)
	// Parameters:
	//  - ProjectId
	//  - Key
	//  - Otype
	//  - UidPair
	FriendChanged(project_id int32, key string, otype int8, uid_pair []*rtmcommon.FriendPair) (err error)
	// Parameters:
	//  - ProjectId
	//  - Key
	//  - GroupId
	//  - GroupName
	CreateGroup(project_id int32, key string, group_id int64, group_name string) (r int64, err error)
	// Parameters:
	//  - ProjectId
	//  - Key
	//  - GroupId
	DeleteGroup(project_id int32, key string, group_id int64) (err error)
	// Parameters:
	//  - ProjectId
	//  - Key
	//  - GroupId
	//  - Who
	JoinGroup(project_id int32, key string, group_id int64, who int64) (r int64, err error)
	// Parameters:
	//  - ProjectId
	//  - Key
	//  - Otype
	//  - GroupId
	//  - Uids
	GroupChanged(project_id int32, key string, otype int8, group_id int64, uids []int64) (err error)
	// Parameters:
	//  - ProjectId
	//  - Key
	//  - Uid
	GetToken(project_id int32, key string, uid int64) (r *Token, err error)
}

type ServerGatedServiceClient struct {
	*fp1225.FunplusServiceClient
}

func NewServerGatedServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ServerGatedServiceClient {
	return &ServerGatedServiceClient{FunplusServiceClient: fp1225.NewFunplusServiceClientFactory(t, f)}
}

func NewServerGatedServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ServerGatedServiceClient {
	return &ServerGatedServiceClient{FunplusServiceClient: fp1225.NewFunplusServiceClientProtocol(t, iprot, oprot)}
}

// Parameters:
//  - ProjectId
//  - Key
//  - Mtype
//  - From
//  - To
//  - Mid
//  - Message
func (p *ServerGatedServiceClient) SendMsg(project_id int32, key string, mtype int8, from int64, to int64, mid int64, message string) (r int32, err error) {
	if err = p.sendSendMsg(project_id, key, mtype, from, to, mid, message); err != nil {
		return
	}
	return p.recvSendMsg()
}

func (p *ServerGatedServiceClient) sendSendMsg(project_id int32, key string, mtype int8, from int64, to int64, mid int64, message string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("send_msg", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SendMsgArgs{
		ProjectId: project_id,
		Key:       key,
		Mtype:     mtype,
		From:      from,
		To:        to,
		Mid:       mid,
		Message:   message,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ServerGatedServiceClient) recvSendMsg() (value int32, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error1 error
		error1, err = error0.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error1
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "send_msg failed: out of sequence response")
		return
	}
	result := SendMsgResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ProjectId
//  - Key
//  - Mtype
//  - From
//  - Tos
//  - Mid
//  - Message
func (p *ServerGatedServiceClient) SendMsgs(project_id int32, key string, mtype int8, from int64, tos []int64, mid int64, message string) (r int32, err error) {
	if err = p.sendSendMsgs(project_id, key, mtype, from, tos, mid, message); err != nil {
		return
	}
	return p.recvSendMsgs()
}

func (p *ServerGatedServiceClient) sendSendMsgs(project_id int32, key string, mtype int8, from int64, tos []int64, mid int64, message string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("send_msgs", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SendMsgsArgs{
		ProjectId: project_id,
		Key:       key,
		Mtype:     mtype,
		From:      from,
		Tos:       tos,
		Mid:       mid,
		Message:   message,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ServerGatedServiceClient) recvSendMsgs() (value int32, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error3 error
		error3, err = error2.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error3
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "send_msgs failed: out of sequence response")
		return
	}
	result := SendMsgsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ProjectId
//  - Key
//  - Mtype
//  - From
//  - GroupId
//  - Mid
//  - Message
func (p *ServerGatedServiceClient) SendGroupMsg(project_id int32, key string, mtype int8, from int64, group_id int64, mid int64, message string) (r int32, err error) {
	if err = p.sendSendGroupMsg(project_id, key, mtype, from, group_id, mid, message); err != nil {
		return
	}
	return p.recvSendGroupMsg()
}

func (p *ServerGatedServiceClient) sendSendGroupMsg(project_id int32, key string, mtype int8, from int64, group_id int64, mid int64, message string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("send_group_msg", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SendGroupMsgArgs{
		ProjectId: project_id,
		Key:       key,
		Mtype:     mtype,
		From:      from,
		GroupId:   group_id,
		Mid:       mid,
		Message:   message,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ServerGatedServiceClient) recvSendGroupMsg() (value int32, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error4 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error5 error
		error5, err = error4.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error5
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "send_group_msg failed: out of sequence response")
		return
	}
	result := SendGroupMsgResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ProjectId
//  - Key
//  - Mtype
//  - From
//  - Mid
//  - Message
func (p *ServerGatedServiceClient) BroadcastMsg(project_id int32, key string, mtype int8, from int64, mid int64, message string) (r int32, err error) {
	if err = p.sendBroadcastMsg(project_id, key, mtype, from, mid, message); err != nil {
		return
	}
	return p.recvBroadcastMsg()
}

func (p *ServerGatedServiceClient) sendBroadcastMsg(project_id int32, key string, mtype int8, from int64, mid int64, message string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("broadcast_msg", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BroadcastMsgArgs{
		ProjectId: project_id,
		Key:       key,
		Mtype:     mtype,
		From:      from,
		Mid:       mid,
		Message:   message,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ServerGatedServiceClient) recvBroadcastMsg() (value int32, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error6 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error7 error
		error7, err = error6.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error7
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "broadcast_msg failed: out of sequence response")
		return
	}
	result := BroadcastMsgResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ProjectId
//  - Key
//  - Mtype
//  - From
//  - Message
func (p *ServerGatedServiceClient) BroadcastNote(project_id int32, key string, mtype int8, from int64, message string) (err error) {
	if err = p.sendBroadcastNote(project_id, key, mtype, from, message); err != nil {
		return
	}
	return
}

func (p *ServerGatedServiceClient) sendBroadcastNote(project_id int32, key string, mtype int8, from int64, message string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("broadcast_note", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := BroadcastNoteArgs{
		ProjectId: project_id,
		Key:       key,
		Mtype:     mtype,
		From:      from,
		Message:   message,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

// Parameters:
//  - ProjectId
//  - Key
//  - Mtype
//  - From
//  - To
//  - Message
func (p *ServerGatedServiceClient) SendNote(project_id int32, key string, mtype int8, from int64, to int64, message string) (err error) {
	if err = p.sendSendNote(project_id, key, mtype, from, to, message); err != nil {
		return
	}
	return
}

func (p *ServerGatedServiceClient) sendSendNote(project_id int32, key string, mtype int8, from int64, to int64, message string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("send_note", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SendNoteArgs{
		ProjectId: project_id,
		Key:       key,
		Mtype:     mtype,
		From:      from,
		To:        to,
		Message:   message,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

// Parameters:
//  - ProjectId
//  - Key
//  - Mtype
//  - From
//  - Tos
//  - Message
func (p *ServerGatedServiceClient) SendNotes(project_id int32, key string, mtype int8, from int64, tos []int64, message string) (err error) {
	if err = p.sendSendNotes(project_id, key, mtype, from, tos, message); err != nil {
		return
	}
	return
}

func (p *ServerGatedServiceClient) sendSendNotes(project_id int32, key string, mtype int8, from int64, tos []int64, message string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("send_notes", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SendNotesArgs{
		ProjectId: project_id,
		Key:       key,
		Mtype:     mtype,
		From:      from,
		Tos:       tos,
		Message:   message,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

// Parameters:
//  - ProjectId
//  - Key
//  - Mtype
//  - From
//  - GroupId
//  - Message
func (p *ServerGatedServiceClient) SendGroupNote(project_id int32, key string, mtype int8, from int64, group_id int64, message string) (err error) {
	if err = p.sendSendGroupNote(project_id, key, mtype, from, group_id, message); err != nil {
		return
	}
	return
}

func (p *ServerGatedServiceClient) sendSendGroupNote(project_id int32, key string, mtype int8, from int64, group_id int64, message string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("send_group_note", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SendGroupNoteArgs{
		ProjectId: project_id,
		Key:       key,
		Mtype:     mtype,
		From:      from,
		GroupId:   group_id,
		Message:   message,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

// Parameters:
//  - ProjectId
//  - Key
//  - Otype
//  - UidPair
func (p *ServerGatedServiceClient) FriendChanged(project_id int32, key string, otype int8, uid_pair []*rtmcommon.FriendPair) (err error) {
	if err = p.sendFriendChanged(project_id, key, otype, uid_pair); err != nil {
		return
	}
	return p.recvFriendChanged()
}

func (p *ServerGatedServiceClient) sendFriendChanged(project_id int32, key string, otype int8, uid_pair []*rtmcommon.FriendPair) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("friend_changed", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := FriendChangedArgs{
		ProjectId: project_id,
		Key:       key,
		Otype:     otype,
		UidPair:   uid_pair,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ServerGatedServiceClient) recvFriendChanged() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error8 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error9 error
		error9, err = error8.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error9
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "friend_changed failed: out of sequence response")
		return
	}
	result := FriendChangedResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	return
}

// Parameters:
//  - ProjectId
//  - Key
//  - GroupId
//  - GroupName
func (p *ServerGatedServiceClient) CreateGroup(project_id int32, key string, group_id int64, group_name string) (r int64, err error) {
	if err = p.sendCreateGroup(project_id, key, group_id, group_name); err != nil {
		return
	}
	return p.recvCreateGroup()
}

func (p *ServerGatedServiceClient) sendCreateGroup(project_id int32, key string, group_id int64, group_name string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("create_group", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := CreateGroupArgs{
		ProjectId: project_id,
		Key:       key,
		GroupId:   group_id,
		GroupName: group_name,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ServerGatedServiceClient) recvCreateGroup() (value int64, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error10 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error11 error
		error11, err = error10.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error11
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "create_group failed: out of sequence response")
		return
	}
	result := CreateGroupResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ProjectId
//  - Key
//  - GroupId
func (p *ServerGatedServiceClient) DeleteGroup(project_id int32, key string, group_id int64) (err error) {
	if err = p.sendDeleteGroup(project_id, key, group_id); err != nil {
		return
	}
	return p.recvDeleteGroup()
}

func (p *ServerGatedServiceClient) sendDeleteGroup(project_id int32, key string, group_id int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("delete_group", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DeleteGroupArgs{
		ProjectId: project_id,
		Key:       key,
		GroupId:   group_id,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ServerGatedServiceClient) recvDeleteGroup() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error12 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error13 error
		error13, err = error12.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error13
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "delete_group failed: out of sequence response")
		return
	}
	result := DeleteGroupResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	return
}

// Parameters:
//  - ProjectId
//  - Key
//  - GroupId
//  - Who
func (p *ServerGatedServiceClient) JoinGroup(project_id int32, key string, group_id int64, who int64) (r int64, err error) {
	if err = p.sendJoinGroup(project_id, key, group_id, who); err != nil {
		return
	}
	return p.recvJoinGroup()
}

func (p *ServerGatedServiceClient) sendJoinGroup(project_id int32, key string, group_id int64, who int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("join_group", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := JoinGroupArgs{
		ProjectId: project_id,
		Key:       key,
		GroupId:   group_id,
		Who:       who,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ServerGatedServiceClient) recvJoinGroup() (value int64, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error14 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error15 error
		error15, err = error14.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error15
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "join_group failed: out of sequence response")
		return
	}
	result := JoinGroupResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ProjectId
//  - Key
//  - Otype
//  - GroupId
//  - Uids
func (p *ServerGatedServiceClient) GroupChanged(project_id int32, key string, otype int8, group_id int64, uids []int64) (err error) {
	if err = p.sendGroupChanged(project_id, key, otype, group_id, uids); err != nil {
		return
	}
	return p.recvGroupChanged()
}

func (p *ServerGatedServiceClient) sendGroupChanged(project_id int32, key string, otype int8, group_id int64, uids []int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("group_changed", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GroupChangedArgs{
		ProjectId: project_id,
		Key:       key,
		Otype:     otype,
		GroupId:   group_id,
		Uids:      uids,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ServerGatedServiceClient) recvGroupChanged() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error16 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error17 error
		error17, err = error16.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error17
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "group_changed failed: out of sequence response")
		return
	}
	result := GroupChangedResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	return
}

// Parameters:
//  - ProjectId
//  - Key
//  - Uid
func (p *ServerGatedServiceClient) GetToken(project_id int32, key string, uid int64) (r *Token, err error) {
	if err = p.sendGetToken(project_id, key, uid); err != nil {
		return
	}
	return p.recvGetToken()
}

func (p *ServerGatedServiceClient) sendGetToken(project_id int32, key string, uid int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_token", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetTokenArgs{
		ProjectId: project_id,
		Key:       key,
		Uid:       uid,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ServerGatedServiceClient) recvGetToken() (value *Token, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error18 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error19 error
		error19, err = error18.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error19
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_token failed: out of sequence response")
		return
	}
	result := GetTokenResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ex != nil {
		err = result.Ex
		return
	}
	value = result.GetSuccess()
	return
}

type ServerGatedServiceProcessor struct {
	*fp1225.FunplusServiceProcessor
}

func NewServerGatedServiceProcessor(handler ServerGatedService) *ServerGatedServiceProcessor {
	self20 := &ServerGatedServiceProcessor{fp1225.NewFunplusServiceProcessor(handler)}
	self20.AddToProcessorMap("send_msg", &serverGatedServiceProcessorSendMsg{handler: handler})
	self20.AddToProcessorMap("send_msgs", &serverGatedServiceProcessorSendMsgs{handler: handler})
	self20.AddToProcessorMap("send_group_msg", &serverGatedServiceProcessorSendGroupMsg{handler: handler})
	self20.AddToProcessorMap("broadcast_msg", &serverGatedServiceProcessorBroadcastMsg{handler: handler})
	self20.AddToProcessorMap("broadcast_note", &serverGatedServiceProcessorBroadcastNote{handler: handler})
	self20.AddToProcessorMap("send_note", &serverGatedServiceProcessorSendNote{handler: handler})
	self20.AddToProcessorMap("send_notes", &serverGatedServiceProcessorSendNotes{handler: handler})
	self20.AddToProcessorMap("send_group_note", &serverGatedServiceProcessorSendGroupNote{handler: handler})
	self20.AddToProcessorMap("friend_changed", &serverGatedServiceProcessorFriendChanged{handler: handler})
	self20.AddToProcessorMap("create_group", &serverGatedServiceProcessorCreateGroup{handler: handler})
	self20.AddToProcessorMap("delete_group", &serverGatedServiceProcessorDeleteGroup{handler: handler})
	self20.AddToProcessorMap("join_group", &serverGatedServiceProcessorJoinGroup{handler: handler})
	self20.AddToProcessorMap("group_changed", &serverGatedServiceProcessorGroupChanged{handler: handler})
	self20.AddToProcessorMap("get_token", &serverGatedServiceProcessorGetToken{handler: handler})
	return self20
}

type serverGatedServiceProcessorSendMsg struct {
	handler ServerGatedService
}

func (p *serverGatedServiceProcessorSendMsg) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SendMsgArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("send_msg", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SendMsgResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.SendMsg(args.ProjectId, args.Key, args.Mtype, args.From, args.To, args.Mid, args.Message); err2 != nil {
		switch v := err2.(type) {
		case *ServerGatedException:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing send_msg: "+err2.Error())
			oprot.WriteMessageBegin("send_msg", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("send_msg", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type serverGatedServiceProcessorSendMsgs struct {
	handler ServerGatedService
}

func (p *serverGatedServiceProcessorSendMsgs) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SendMsgsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("send_msgs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SendMsgsResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.SendMsgs(args.ProjectId, args.Key, args.Mtype, args.From, args.Tos, args.Mid, args.Message); err2 != nil {
		switch v := err2.(type) {
		case *ServerGatedException:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing send_msgs: "+err2.Error())
			oprot.WriteMessageBegin("send_msgs", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("send_msgs", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type serverGatedServiceProcessorSendGroupMsg struct {
	handler ServerGatedService
}

func (p *serverGatedServiceProcessorSendGroupMsg) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SendGroupMsgArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("send_group_msg", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SendGroupMsgResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.SendGroupMsg(args.ProjectId, args.Key, args.Mtype, args.From, args.GroupId, args.Mid, args.Message); err2 != nil {
		switch v := err2.(type) {
		case *ServerGatedException:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing send_group_msg: "+err2.Error())
			oprot.WriteMessageBegin("send_group_msg", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("send_group_msg", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type serverGatedServiceProcessorBroadcastMsg struct {
	handler ServerGatedService
}

func (p *serverGatedServiceProcessorBroadcastMsg) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BroadcastMsgArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("broadcast_msg", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := BroadcastMsgResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.BroadcastMsg(args.ProjectId, args.Key, args.Mtype, args.From, args.Mid, args.Message); err2 != nil {
		switch v := err2.(type) {
		case *ServerGatedException:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing broadcast_msg: "+err2.Error())
			oprot.WriteMessageBegin("broadcast_msg", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("broadcast_msg", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type serverGatedServiceProcessorBroadcastNote struct {
	handler ServerGatedService
}

func (p *serverGatedServiceProcessorBroadcastNote) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BroadcastNoteArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	if err2 = p.handler.BroadcastNote(args.ProjectId, args.Key, args.Mtype, args.From, args.Message); err2 != nil {
		return true, err2
	}
	return true, nil
}

type serverGatedServiceProcessorSendNote struct {
	handler ServerGatedService
}

func (p *serverGatedServiceProcessorSendNote) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SendNoteArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	if err2 = p.handler.SendNote(args.ProjectId, args.Key, args.Mtype, args.From, args.To, args.Message); err2 != nil {
		return true, err2
	}
	return true, nil
}

type serverGatedServiceProcessorSendNotes struct {
	handler ServerGatedService
}

func (p *serverGatedServiceProcessorSendNotes) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SendNotesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	if err2 = p.handler.SendNotes(args.ProjectId, args.Key, args.Mtype, args.From, args.Tos, args.Message); err2 != nil {
		return true, err2
	}
	return true, nil
}

type serverGatedServiceProcessorSendGroupNote struct {
	handler ServerGatedService
}

func (p *serverGatedServiceProcessorSendGroupNote) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SendGroupNoteArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	if err2 = p.handler.SendGroupNote(args.ProjectId, args.Key, args.Mtype, args.From, args.GroupId, args.Message); err2 != nil {
		return true, err2
	}
	return true, nil
}

type serverGatedServiceProcessorFriendChanged struct {
	handler ServerGatedService
}

func (p *serverGatedServiceProcessorFriendChanged) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FriendChangedArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("friend_changed", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := FriendChangedResult{}
	var err2 error
	if err2 = p.handler.FriendChanged(args.ProjectId, args.Key, args.Otype, args.UidPair); err2 != nil {
		switch v := err2.(type) {
		case *ServerGatedException:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing friend_changed: "+err2.Error())
			oprot.WriteMessageBegin("friend_changed", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("friend_changed", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type serverGatedServiceProcessorCreateGroup struct {
	handler ServerGatedService
}

func (p *serverGatedServiceProcessorCreateGroup) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CreateGroupArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("create_group", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := CreateGroupResult{}
	var retval int64
	var err2 error
	if retval, err2 = p.handler.CreateGroup(args.ProjectId, args.Key, args.GroupId, args.GroupName); err2 != nil {
		switch v := err2.(type) {
		case *ServerGatedException:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing create_group: "+err2.Error())
			oprot.WriteMessageBegin("create_group", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("create_group", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type serverGatedServiceProcessorDeleteGroup struct {
	handler ServerGatedService
}

func (p *serverGatedServiceProcessorDeleteGroup) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DeleteGroupArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("delete_group", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DeleteGroupResult{}
	var err2 error
	if err2 = p.handler.DeleteGroup(args.ProjectId, args.Key, args.GroupId); err2 != nil {
		switch v := err2.(type) {
		case *ServerGatedException:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing delete_group: "+err2.Error())
			oprot.WriteMessageBegin("delete_group", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("delete_group", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type serverGatedServiceProcessorJoinGroup struct {
	handler ServerGatedService
}

func (p *serverGatedServiceProcessorJoinGroup) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := JoinGroupArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("join_group", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := JoinGroupResult{}
	var retval int64
	var err2 error
	if retval, err2 = p.handler.JoinGroup(args.ProjectId, args.Key, args.GroupId, args.Who); err2 != nil {
		switch v := err2.(type) {
		case *ServerGatedException:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing join_group: "+err2.Error())
			oprot.WriteMessageBegin("join_group", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("join_group", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type serverGatedServiceProcessorGroupChanged struct {
	handler ServerGatedService
}

func (p *serverGatedServiceProcessorGroupChanged) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GroupChangedArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("group_changed", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GroupChangedResult{}
	var err2 error
	if err2 = p.handler.GroupChanged(args.ProjectId, args.Key, args.Otype, args.GroupId, args.Uids); err2 != nil {
		switch v := err2.(type) {
		case *ServerGatedException:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing group_changed: "+err2.Error())
			oprot.WriteMessageBegin("group_changed", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("group_changed", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type serverGatedServiceProcessorGetToken struct {
	handler ServerGatedService
}

func (p *serverGatedServiceProcessorGetToken) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetTokenArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_token", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetTokenResult{}
	var retval *Token
	var err2 error
	if retval, err2 = p.handler.GetToken(args.ProjectId, args.Key, args.Uid); err2 != nil {
		switch v := err2.(type) {
		case *ServerGatedException:
			result.Ex = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_token: "+err2.Error())
			oprot.WriteMessageBegin("get_token", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_token", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

type SendMsgArgs struct {
	ProjectId int32  `thrift:"project_id,1" json:"project_id"`
	Key       string `thrift:"key,2" json:"key"`
	Mtype     int8   `thrift:"mtype,3" json:"mtype"`
	From      int64  `thrift:"from,4" json:"from"`
	To        int64  `thrift:"to,5" json:"to"`
	Mid       int64  `thrift:"mid,6" json:"mid"`
	Message   string `thrift:"message,7" json:"message"`
}

func NewSendMsgArgs() *SendMsgArgs {
	return &SendMsgArgs{}
}

func (p *SendMsgArgs) GetProjectId() int32 {
	return p.ProjectId
}

func (p *SendMsgArgs) GetKey() string {
	return p.Key
}

func (p *SendMsgArgs) GetMtype() int8 {
	return p.Mtype
}

func (p *SendMsgArgs) GetFrom() int64 {
	return p.From
}

func (p *SendMsgArgs) GetTo() int64 {
	return p.To
}

func (p *SendMsgArgs) GetMid() int64 {
	return p.Mid
}

func (p *SendMsgArgs) GetMessage() string {
	return p.Message
}
func (p *SendMsgArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SendMsgArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ProjectId = v
	}
	return nil
}

func (p *SendMsgArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Key = v
	}
	return nil
}

func (p *SendMsgArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		temp := int8(v)
		p.Mtype = temp
	}
	return nil
}

func (p *SendMsgArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.From = v
	}
	return nil
}

func (p *SendMsgArgs) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.To = v
	}
	return nil
}

func (p *SendMsgArgs) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.Mid = v
	}
	return nil
}

func (p *SendMsgArgs) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *SendMsgArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("send_msg_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SendMsgArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("project_id", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:project_id: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ProjectId)); err != nil {
		return fmt.Errorf("%T.project_id (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:project_id: %s", p, err)
	}
	return err
}

func (p *SendMsgArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:key: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return fmt.Errorf("%T.key (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:key: %s", p, err)
	}
	return err
}

func (p *SendMsgArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mtype", thrift.BYTE, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:mtype: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.Mtype)); err != nil {
		return fmt.Errorf("%T.mtype (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:mtype: %s", p, err)
	}
	return err
}

func (p *SendMsgArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("from", thrift.I64, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:from: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.From)); err != nil {
		return fmt.Errorf("%T.from (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:from: %s", p, err)
	}
	return err
}

func (p *SendMsgArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("to", thrift.I64, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:to: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.To)); err != nil {
		return fmt.Errorf("%T.to (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:to: %s", p, err)
	}
	return err
}

func (p *SendMsgArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mid", thrift.I64, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:mid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Mid)); err != nil {
		return fmt.Errorf("%T.mid (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:mid: %s", p, err)
	}
	return err
}

func (p *SendMsgArgs) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:message: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return fmt.Errorf("%T.message (7) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:message: %s", p, err)
	}
	return err
}

func (p *SendMsgArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SendMsgArgs(%+v)", *p)
}

type SendMsgResult struct {
	Success *int32                `thrift:"success,0" json:"success"`
	Ex      *ServerGatedException `thrift:"ex,1" json:"ex"`
}

func NewSendMsgResult() *SendMsgResult {
	return &SendMsgResult{}
}

var SendMsgResult_Success_DEFAULT int32

func (p *SendMsgResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return SendMsgResult_Success_DEFAULT
	}
	return *p.Success
}

var SendMsgResult_Ex_DEFAULT *ServerGatedException

func (p *SendMsgResult) GetEx() *ServerGatedException {
	if !p.IsSetEx() {
		return SendMsgResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *SendMsgResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SendMsgResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *SendMsgResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SendMsgResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *SendMsgResult) ReadField1(iprot thrift.TProtocol) error {
	p.Ex = &ServerGatedException{}
	if err := p.Ex.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Ex, err)
	}
	return nil
}

func (p *SendMsgResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("send_msg_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SendMsgResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *SendMsgResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:ex: %s", p, err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Ex, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:ex: %s", p, err)
		}
	}
	return err
}

func (p *SendMsgResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SendMsgResult(%+v)", *p)
}

type SendMsgsArgs struct {
	ProjectId int32   `thrift:"project_id,1" json:"project_id"`
	Key       string  `thrift:"key,2" json:"key"`
	Mtype     int8    `thrift:"mtype,3" json:"mtype"`
	From      int64   `thrift:"from,4" json:"from"`
	Tos       []int64 `thrift:"tos,5" json:"tos"`
	Mid       int64   `thrift:"mid,6" json:"mid"`
	Message   string  `thrift:"message,7" json:"message"`
}

func NewSendMsgsArgs() *SendMsgsArgs {
	return &SendMsgsArgs{}
}

func (p *SendMsgsArgs) GetProjectId() int32 {
	return p.ProjectId
}

func (p *SendMsgsArgs) GetKey() string {
	return p.Key
}

func (p *SendMsgsArgs) GetMtype() int8 {
	return p.Mtype
}

func (p *SendMsgsArgs) GetFrom() int64 {
	return p.From
}

func (p *SendMsgsArgs) GetTos() []int64 {
	return p.Tos
}

func (p *SendMsgsArgs) GetMid() int64 {
	return p.Mid
}

func (p *SendMsgsArgs) GetMessage() string {
	return p.Message
}
func (p *SendMsgsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SendMsgsArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ProjectId = v
	}
	return nil
}

func (p *SendMsgsArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Key = v
	}
	return nil
}

func (p *SendMsgsArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		temp := int8(v)
		p.Mtype = temp
	}
	return nil
}

func (p *SendMsgsArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.From = v
	}
	return nil
}

func (p *SendMsgsArgs) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]int64, 0, size)
	p.Tos = tSlice
	for i := 0; i < size; i++ {
		var _elem21 int64
		if v, err := iprot.ReadI64(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem21 = v
		}
		p.Tos = append(p.Tos, _elem21)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *SendMsgsArgs) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.Mid = v
	}
	return nil
}

func (p *SendMsgsArgs) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *SendMsgsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("send_msgs_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SendMsgsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("project_id", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:project_id: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ProjectId)); err != nil {
		return fmt.Errorf("%T.project_id (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:project_id: %s", p, err)
	}
	return err
}

func (p *SendMsgsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:key: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return fmt.Errorf("%T.key (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:key: %s", p, err)
	}
	return err
}

func (p *SendMsgsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mtype", thrift.BYTE, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:mtype: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.Mtype)); err != nil {
		return fmt.Errorf("%T.mtype (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:mtype: %s", p, err)
	}
	return err
}

func (p *SendMsgsArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("from", thrift.I64, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:from: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.From)); err != nil {
		return fmt.Errorf("%T.from (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:from: %s", p, err)
	}
	return err
}

func (p *SendMsgsArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tos", thrift.LIST, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:tos: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.Tos)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Tos {
		if err := oprot.WriteI64(int64(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:tos: %s", p, err)
	}
	return err
}

func (p *SendMsgsArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mid", thrift.I64, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:mid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Mid)); err != nil {
		return fmt.Errorf("%T.mid (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:mid: %s", p, err)
	}
	return err
}

func (p *SendMsgsArgs) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:message: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return fmt.Errorf("%T.message (7) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:message: %s", p, err)
	}
	return err
}

func (p *SendMsgsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SendMsgsArgs(%+v)", *p)
}

type SendMsgsResult struct {
	Success *int32                `thrift:"success,0" json:"success"`
	Ex      *ServerGatedException `thrift:"ex,1" json:"ex"`
}

func NewSendMsgsResult() *SendMsgsResult {
	return &SendMsgsResult{}
}

var SendMsgsResult_Success_DEFAULT int32

func (p *SendMsgsResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return SendMsgsResult_Success_DEFAULT
	}
	return *p.Success
}

var SendMsgsResult_Ex_DEFAULT *ServerGatedException

func (p *SendMsgsResult) GetEx() *ServerGatedException {
	if !p.IsSetEx() {
		return SendMsgsResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *SendMsgsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SendMsgsResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *SendMsgsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SendMsgsResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *SendMsgsResult) ReadField1(iprot thrift.TProtocol) error {
	p.Ex = &ServerGatedException{}
	if err := p.Ex.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Ex, err)
	}
	return nil
}

func (p *SendMsgsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("send_msgs_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SendMsgsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *SendMsgsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:ex: %s", p, err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Ex, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:ex: %s", p, err)
		}
	}
	return err
}

func (p *SendMsgsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SendMsgsResult(%+v)", *p)
}

type SendGroupMsgArgs struct {
	ProjectId int32  `thrift:"project_id,1" json:"project_id"`
	Key       string `thrift:"key,2" json:"key"`
	Mtype     int8   `thrift:"mtype,3" json:"mtype"`
	From      int64  `thrift:"from,4" json:"from"`
	GroupId   int64  `thrift:"group_id,5" json:"group_id"`
	Mid       int64  `thrift:"mid,6" json:"mid"`
	Message   string `thrift:"message,7" json:"message"`
}

func NewSendGroupMsgArgs() *SendGroupMsgArgs {
	return &SendGroupMsgArgs{}
}

func (p *SendGroupMsgArgs) GetProjectId() int32 {
	return p.ProjectId
}

func (p *SendGroupMsgArgs) GetKey() string {
	return p.Key
}

func (p *SendGroupMsgArgs) GetMtype() int8 {
	return p.Mtype
}

func (p *SendGroupMsgArgs) GetFrom() int64 {
	return p.From
}

func (p *SendGroupMsgArgs) GetGroupId() int64 {
	return p.GroupId
}

func (p *SendGroupMsgArgs) GetMid() int64 {
	return p.Mid
}

func (p *SendGroupMsgArgs) GetMessage() string {
	return p.Message
}
func (p *SendGroupMsgArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SendGroupMsgArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ProjectId = v
	}
	return nil
}

func (p *SendGroupMsgArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Key = v
	}
	return nil
}

func (p *SendGroupMsgArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		temp := int8(v)
		p.Mtype = temp
	}
	return nil
}

func (p *SendGroupMsgArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.From = v
	}
	return nil
}

func (p *SendGroupMsgArgs) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.GroupId = v
	}
	return nil
}

func (p *SendGroupMsgArgs) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.Mid = v
	}
	return nil
}

func (p *SendGroupMsgArgs) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *SendGroupMsgArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("send_group_msg_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SendGroupMsgArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("project_id", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:project_id: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ProjectId)); err != nil {
		return fmt.Errorf("%T.project_id (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:project_id: %s", p, err)
	}
	return err
}

func (p *SendGroupMsgArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:key: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return fmt.Errorf("%T.key (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:key: %s", p, err)
	}
	return err
}

func (p *SendGroupMsgArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mtype", thrift.BYTE, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:mtype: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.Mtype)); err != nil {
		return fmt.Errorf("%T.mtype (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:mtype: %s", p, err)
	}
	return err
}

func (p *SendGroupMsgArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("from", thrift.I64, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:from: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.From)); err != nil {
		return fmt.Errorf("%T.from (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:from: %s", p, err)
	}
	return err
}

func (p *SendGroupMsgArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("group_id", thrift.I64, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:group_id: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.GroupId)); err != nil {
		return fmt.Errorf("%T.group_id (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:group_id: %s", p, err)
	}
	return err
}

func (p *SendGroupMsgArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mid", thrift.I64, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:mid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Mid)); err != nil {
		return fmt.Errorf("%T.mid (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:mid: %s", p, err)
	}
	return err
}

func (p *SendGroupMsgArgs) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:message: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return fmt.Errorf("%T.message (7) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:message: %s", p, err)
	}
	return err
}

func (p *SendGroupMsgArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SendGroupMsgArgs(%+v)", *p)
}

type SendGroupMsgResult struct {
	Success *int32                `thrift:"success,0" json:"success"`
	Ex      *ServerGatedException `thrift:"ex,1" json:"ex"`
}

func NewSendGroupMsgResult() *SendGroupMsgResult {
	return &SendGroupMsgResult{}
}

var SendGroupMsgResult_Success_DEFAULT int32

func (p *SendGroupMsgResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return SendGroupMsgResult_Success_DEFAULT
	}
	return *p.Success
}

var SendGroupMsgResult_Ex_DEFAULT *ServerGatedException

func (p *SendGroupMsgResult) GetEx() *ServerGatedException {
	if !p.IsSetEx() {
		return SendGroupMsgResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *SendGroupMsgResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SendGroupMsgResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *SendGroupMsgResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SendGroupMsgResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *SendGroupMsgResult) ReadField1(iprot thrift.TProtocol) error {
	p.Ex = &ServerGatedException{}
	if err := p.Ex.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Ex, err)
	}
	return nil
}

func (p *SendGroupMsgResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("send_group_msg_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SendGroupMsgResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *SendGroupMsgResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:ex: %s", p, err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Ex, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:ex: %s", p, err)
		}
	}
	return err
}

func (p *SendGroupMsgResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SendGroupMsgResult(%+v)", *p)
}

type BroadcastMsgArgs struct {
	ProjectId int32  `thrift:"project_id,1" json:"project_id"`
	Key       string `thrift:"key,2" json:"key"`
	Mtype     int8   `thrift:"mtype,3" json:"mtype"`
	From      int64  `thrift:"from,4" json:"from"`
	Mid       int64  `thrift:"mid,5" json:"mid"`
	Message   string `thrift:"message,6" json:"message"`
}

func NewBroadcastMsgArgs() *BroadcastMsgArgs {
	return &BroadcastMsgArgs{}
}

func (p *BroadcastMsgArgs) GetProjectId() int32 {
	return p.ProjectId
}

func (p *BroadcastMsgArgs) GetKey() string {
	return p.Key
}

func (p *BroadcastMsgArgs) GetMtype() int8 {
	return p.Mtype
}

func (p *BroadcastMsgArgs) GetFrom() int64 {
	return p.From
}

func (p *BroadcastMsgArgs) GetMid() int64 {
	return p.Mid
}

func (p *BroadcastMsgArgs) GetMessage() string {
	return p.Message
}
func (p *BroadcastMsgArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *BroadcastMsgArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ProjectId = v
	}
	return nil
}

func (p *BroadcastMsgArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Key = v
	}
	return nil
}

func (p *BroadcastMsgArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		temp := int8(v)
		p.Mtype = temp
	}
	return nil
}

func (p *BroadcastMsgArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.From = v
	}
	return nil
}

func (p *BroadcastMsgArgs) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Mid = v
	}
	return nil
}

func (p *BroadcastMsgArgs) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *BroadcastMsgArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("broadcast_msg_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *BroadcastMsgArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("project_id", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:project_id: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ProjectId)); err != nil {
		return fmt.Errorf("%T.project_id (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:project_id: %s", p, err)
	}
	return err
}

func (p *BroadcastMsgArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:key: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return fmt.Errorf("%T.key (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:key: %s", p, err)
	}
	return err
}

func (p *BroadcastMsgArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mtype", thrift.BYTE, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:mtype: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.Mtype)); err != nil {
		return fmt.Errorf("%T.mtype (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:mtype: %s", p, err)
	}
	return err
}

func (p *BroadcastMsgArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("from", thrift.I64, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:from: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.From)); err != nil {
		return fmt.Errorf("%T.from (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:from: %s", p, err)
	}
	return err
}

func (p *BroadcastMsgArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mid", thrift.I64, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:mid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Mid)); err != nil {
		return fmt.Errorf("%T.mid (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:mid: %s", p, err)
	}
	return err
}

func (p *BroadcastMsgArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:message: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return fmt.Errorf("%T.message (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:message: %s", p, err)
	}
	return err
}

func (p *BroadcastMsgArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BroadcastMsgArgs(%+v)", *p)
}

type BroadcastMsgResult struct {
	Success *int32                `thrift:"success,0" json:"success"`
	Ex      *ServerGatedException `thrift:"ex,1" json:"ex"`
}

func NewBroadcastMsgResult() *BroadcastMsgResult {
	return &BroadcastMsgResult{}
}

var BroadcastMsgResult_Success_DEFAULT int32

func (p *BroadcastMsgResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return BroadcastMsgResult_Success_DEFAULT
	}
	return *p.Success
}

var BroadcastMsgResult_Ex_DEFAULT *ServerGatedException

func (p *BroadcastMsgResult) GetEx() *ServerGatedException {
	if !p.IsSetEx() {
		return BroadcastMsgResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *BroadcastMsgResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BroadcastMsgResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *BroadcastMsgResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *BroadcastMsgResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *BroadcastMsgResult) ReadField1(iprot thrift.TProtocol) error {
	p.Ex = &ServerGatedException{}
	if err := p.Ex.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Ex, err)
	}
	return nil
}

func (p *BroadcastMsgResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("broadcast_msg_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *BroadcastMsgResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *BroadcastMsgResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:ex: %s", p, err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Ex, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:ex: %s", p, err)
		}
	}
	return err
}

func (p *BroadcastMsgResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BroadcastMsgResult(%+v)", *p)
}

type BroadcastNoteArgs struct {
	ProjectId int32  `thrift:"project_id,1" json:"project_id"`
	Key       string `thrift:"key,2" json:"key"`
	Mtype     int8   `thrift:"mtype,3" json:"mtype"`
	From      int64  `thrift:"from,4" json:"from"`
	Message   string `thrift:"message,5" json:"message"`
}

func NewBroadcastNoteArgs() *BroadcastNoteArgs {
	return &BroadcastNoteArgs{}
}

func (p *BroadcastNoteArgs) GetProjectId() int32 {
	return p.ProjectId
}

func (p *BroadcastNoteArgs) GetKey() string {
	return p.Key
}

func (p *BroadcastNoteArgs) GetMtype() int8 {
	return p.Mtype
}

func (p *BroadcastNoteArgs) GetFrom() int64 {
	return p.From
}

func (p *BroadcastNoteArgs) GetMessage() string {
	return p.Message
}
func (p *BroadcastNoteArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *BroadcastNoteArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ProjectId = v
	}
	return nil
}

func (p *BroadcastNoteArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Key = v
	}
	return nil
}

func (p *BroadcastNoteArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		temp := int8(v)
		p.Mtype = temp
	}
	return nil
}

func (p *BroadcastNoteArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.From = v
	}
	return nil
}

func (p *BroadcastNoteArgs) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *BroadcastNoteArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("broadcast_note_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *BroadcastNoteArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("project_id", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:project_id: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ProjectId)); err != nil {
		return fmt.Errorf("%T.project_id (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:project_id: %s", p, err)
	}
	return err
}

func (p *BroadcastNoteArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:key: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return fmt.Errorf("%T.key (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:key: %s", p, err)
	}
	return err
}

func (p *BroadcastNoteArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mtype", thrift.BYTE, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:mtype: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.Mtype)); err != nil {
		return fmt.Errorf("%T.mtype (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:mtype: %s", p, err)
	}
	return err
}

func (p *BroadcastNoteArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("from", thrift.I64, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:from: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.From)); err != nil {
		return fmt.Errorf("%T.from (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:from: %s", p, err)
	}
	return err
}

func (p *BroadcastNoteArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:message: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return fmt.Errorf("%T.message (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:message: %s", p, err)
	}
	return err
}

func (p *BroadcastNoteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BroadcastNoteArgs(%+v)", *p)
}

type SendNoteArgs struct {
	ProjectId int32  `thrift:"project_id,1" json:"project_id"`
	Key       string `thrift:"key,2" json:"key"`
	Mtype     int8   `thrift:"mtype,3" json:"mtype"`
	From      int64  `thrift:"from,4" json:"from"`
	To        int64  `thrift:"to,5" json:"to"`
	Message   string `thrift:"message,6" json:"message"`
}

func NewSendNoteArgs() *SendNoteArgs {
	return &SendNoteArgs{}
}

func (p *SendNoteArgs) GetProjectId() int32 {
	return p.ProjectId
}

func (p *SendNoteArgs) GetKey() string {
	return p.Key
}

func (p *SendNoteArgs) GetMtype() int8 {
	return p.Mtype
}

func (p *SendNoteArgs) GetFrom() int64 {
	return p.From
}

func (p *SendNoteArgs) GetTo() int64 {
	return p.To
}

func (p *SendNoteArgs) GetMessage() string {
	return p.Message
}
func (p *SendNoteArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SendNoteArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ProjectId = v
	}
	return nil
}

func (p *SendNoteArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Key = v
	}
	return nil
}

func (p *SendNoteArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		temp := int8(v)
		p.Mtype = temp
	}
	return nil
}

func (p *SendNoteArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.From = v
	}
	return nil
}

func (p *SendNoteArgs) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.To = v
	}
	return nil
}

func (p *SendNoteArgs) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *SendNoteArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("send_note_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SendNoteArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("project_id", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:project_id: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ProjectId)); err != nil {
		return fmt.Errorf("%T.project_id (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:project_id: %s", p, err)
	}
	return err
}

func (p *SendNoteArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:key: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return fmt.Errorf("%T.key (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:key: %s", p, err)
	}
	return err
}

func (p *SendNoteArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mtype", thrift.BYTE, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:mtype: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.Mtype)); err != nil {
		return fmt.Errorf("%T.mtype (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:mtype: %s", p, err)
	}
	return err
}

func (p *SendNoteArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("from", thrift.I64, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:from: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.From)); err != nil {
		return fmt.Errorf("%T.from (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:from: %s", p, err)
	}
	return err
}

func (p *SendNoteArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("to", thrift.I64, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:to: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.To)); err != nil {
		return fmt.Errorf("%T.to (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:to: %s", p, err)
	}
	return err
}

func (p *SendNoteArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:message: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return fmt.Errorf("%T.message (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:message: %s", p, err)
	}
	return err
}

func (p *SendNoteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SendNoteArgs(%+v)", *p)
}

type SendNotesArgs struct {
	ProjectId int32   `thrift:"project_id,1" json:"project_id"`
	Key       string  `thrift:"key,2" json:"key"`
	Mtype     int8    `thrift:"mtype,3" json:"mtype"`
	From      int64   `thrift:"from,4" json:"from"`
	Tos       []int64 `thrift:"tos,5" json:"tos"`
	Message   string  `thrift:"message,6" json:"message"`
}

func NewSendNotesArgs() *SendNotesArgs {
	return &SendNotesArgs{}
}

func (p *SendNotesArgs) GetProjectId() int32 {
	return p.ProjectId
}

func (p *SendNotesArgs) GetKey() string {
	return p.Key
}

func (p *SendNotesArgs) GetMtype() int8 {
	return p.Mtype
}

func (p *SendNotesArgs) GetFrom() int64 {
	return p.From
}

func (p *SendNotesArgs) GetTos() []int64 {
	return p.Tos
}

func (p *SendNotesArgs) GetMessage() string {
	return p.Message
}
func (p *SendNotesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SendNotesArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ProjectId = v
	}
	return nil
}

func (p *SendNotesArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Key = v
	}
	return nil
}

func (p *SendNotesArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		temp := int8(v)
		p.Mtype = temp
	}
	return nil
}

func (p *SendNotesArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.From = v
	}
	return nil
}

func (p *SendNotesArgs) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]int64, 0, size)
	p.Tos = tSlice
	for i := 0; i < size; i++ {
		var _elem22 int64
		if v, err := iprot.ReadI64(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem22 = v
		}
		p.Tos = append(p.Tos, _elem22)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *SendNotesArgs) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *SendNotesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("send_notes_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SendNotesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("project_id", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:project_id: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ProjectId)); err != nil {
		return fmt.Errorf("%T.project_id (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:project_id: %s", p, err)
	}
	return err
}

func (p *SendNotesArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:key: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return fmt.Errorf("%T.key (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:key: %s", p, err)
	}
	return err
}

func (p *SendNotesArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mtype", thrift.BYTE, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:mtype: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.Mtype)); err != nil {
		return fmt.Errorf("%T.mtype (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:mtype: %s", p, err)
	}
	return err
}

func (p *SendNotesArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("from", thrift.I64, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:from: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.From)); err != nil {
		return fmt.Errorf("%T.from (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:from: %s", p, err)
	}
	return err
}

func (p *SendNotesArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tos", thrift.LIST, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:tos: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.Tos)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Tos {
		if err := oprot.WriteI64(int64(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:tos: %s", p, err)
	}
	return err
}

func (p *SendNotesArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:message: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return fmt.Errorf("%T.message (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:message: %s", p, err)
	}
	return err
}

func (p *SendNotesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SendNotesArgs(%+v)", *p)
}

type SendGroupNoteArgs struct {
	ProjectId int32  `thrift:"project_id,1" json:"project_id"`
	Key       string `thrift:"key,2" json:"key"`
	Mtype     int8   `thrift:"mtype,3" json:"mtype"`
	From      int64  `thrift:"from,4" json:"from"`
	GroupId   int64  `thrift:"group_id,5" json:"group_id"`
	Message   string `thrift:"message,6" json:"message"`
}

func NewSendGroupNoteArgs() *SendGroupNoteArgs {
	return &SendGroupNoteArgs{}
}

func (p *SendGroupNoteArgs) GetProjectId() int32 {
	return p.ProjectId
}

func (p *SendGroupNoteArgs) GetKey() string {
	return p.Key
}

func (p *SendGroupNoteArgs) GetMtype() int8 {
	return p.Mtype
}

func (p *SendGroupNoteArgs) GetFrom() int64 {
	return p.From
}

func (p *SendGroupNoteArgs) GetGroupId() int64 {
	return p.GroupId
}

func (p *SendGroupNoteArgs) GetMessage() string {
	return p.Message
}
func (p *SendGroupNoteArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SendGroupNoteArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ProjectId = v
	}
	return nil
}

func (p *SendGroupNoteArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Key = v
	}
	return nil
}

func (p *SendGroupNoteArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		temp := int8(v)
		p.Mtype = temp
	}
	return nil
}

func (p *SendGroupNoteArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.From = v
	}
	return nil
}

func (p *SendGroupNoteArgs) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.GroupId = v
	}
	return nil
}

func (p *SendGroupNoteArgs) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *SendGroupNoteArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("send_group_note_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SendGroupNoteArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("project_id", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:project_id: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ProjectId)); err != nil {
		return fmt.Errorf("%T.project_id (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:project_id: %s", p, err)
	}
	return err
}

func (p *SendGroupNoteArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:key: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return fmt.Errorf("%T.key (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:key: %s", p, err)
	}
	return err
}

func (p *SendGroupNoteArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mtype", thrift.BYTE, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:mtype: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.Mtype)); err != nil {
		return fmt.Errorf("%T.mtype (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:mtype: %s", p, err)
	}
	return err
}

func (p *SendGroupNoteArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("from", thrift.I64, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:from: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.From)); err != nil {
		return fmt.Errorf("%T.from (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:from: %s", p, err)
	}
	return err
}

func (p *SendGroupNoteArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("group_id", thrift.I64, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:group_id: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.GroupId)); err != nil {
		return fmt.Errorf("%T.group_id (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:group_id: %s", p, err)
	}
	return err
}

func (p *SendGroupNoteArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:message: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return fmt.Errorf("%T.message (6) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:message: %s", p, err)
	}
	return err
}

func (p *SendGroupNoteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SendGroupNoteArgs(%+v)", *p)
}

type FriendChangedArgs struct {
	ProjectId int32                   `thrift:"project_id,1" json:"project_id"`
	Key       string                  `thrift:"key,2" json:"key"`
	Otype     int8                    `thrift:"otype,3" json:"otype"`
	UidPair   []*rtmcommon.FriendPair `thrift:"uid_pair,4" json:"uid_pair"`
}

func NewFriendChangedArgs() *FriendChangedArgs {
	return &FriendChangedArgs{}
}

func (p *FriendChangedArgs) GetProjectId() int32 {
	return p.ProjectId
}

func (p *FriendChangedArgs) GetKey() string {
	return p.Key
}

func (p *FriendChangedArgs) GetOtype() int8 {
	return p.Otype
}

func (p *FriendChangedArgs) GetUidPair() []*rtmcommon.FriendPair {
	return p.UidPair
}
func (p *FriendChangedArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FriendChangedArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ProjectId = v
	}
	return nil
}

func (p *FriendChangedArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Key = v
	}
	return nil
}

func (p *FriendChangedArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		temp := int8(v)
		p.Otype = temp
	}
	return nil
}

func (p *FriendChangedArgs) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*rtmcommon.FriendPair, 0, size)
	p.UidPair = tSlice
	for i := 0; i < size; i++ {
		_elem23 := &rtmcommon.FriendPair{}
		if err := _elem23.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem23, err)
		}
		p.UidPair = append(p.UidPair, _elem23)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *FriendChangedArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("friend_changed_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FriendChangedArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("project_id", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:project_id: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ProjectId)); err != nil {
		return fmt.Errorf("%T.project_id (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:project_id: %s", p, err)
	}
	return err
}

func (p *FriendChangedArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:key: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return fmt.Errorf("%T.key (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:key: %s", p, err)
	}
	return err
}

func (p *FriendChangedArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("otype", thrift.BYTE, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:otype: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.Otype)); err != nil {
		return fmt.Errorf("%T.otype (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:otype: %s", p, err)
	}
	return err
}

func (p *FriendChangedArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid_pair", thrift.LIST, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:uid_pair: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.UidPair)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.UidPair {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:uid_pair: %s", p, err)
	}
	return err
}

func (p *FriendChangedArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FriendChangedArgs(%+v)", *p)
}

type FriendChangedResult struct {
	Ex *ServerGatedException `thrift:"ex,1" json:"ex"`
}

func NewFriendChangedResult() *FriendChangedResult {
	return &FriendChangedResult{}
}

var FriendChangedResult_Ex_DEFAULT *ServerGatedException

func (p *FriendChangedResult) GetEx() *ServerGatedException {
	if !p.IsSetEx() {
		return FriendChangedResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *FriendChangedResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *FriendChangedResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FriendChangedResult) ReadField1(iprot thrift.TProtocol) error {
	p.Ex = &ServerGatedException{}
	if err := p.Ex.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Ex, err)
	}
	return nil
}

func (p *FriendChangedResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("friend_changed_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *FriendChangedResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:ex: %s", p, err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Ex, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:ex: %s", p, err)
		}
	}
	return err
}

func (p *FriendChangedResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FriendChangedResult(%+v)", *p)
}

type CreateGroupArgs struct {
	ProjectId int32  `thrift:"project_id,1" json:"project_id"`
	Key       string `thrift:"key,2" json:"key"`
	GroupId   int64  `thrift:"group_id,3" json:"group_id"`
	GroupName string `thrift:"group_name,4" json:"group_name"`
}

func NewCreateGroupArgs() *CreateGroupArgs {
	return &CreateGroupArgs{}
}

func (p *CreateGroupArgs) GetProjectId() int32 {
	return p.ProjectId
}

func (p *CreateGroupArgs) GetKey() string {
	return p.Key
}

func (p *CreateGroupArgs) GetGroupId() int64 {
	return p.GroupId
}

func (p *CreateGroupArgs) GetGroupName() string {
	return p.GroupName
}
func (p *CreateGroupArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateGroupArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ProjectId = v
	}
	return nil
}

func (p *CreateGroupArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Key = v
	}
	return nil
}

func (p *CreateGroupArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.GroupId = v
	}
	return nil
}

func (p *CreateGroupArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.GroupName = v
	}
	return nil
}

func (p *CreateGroupArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("create_group_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("project_id", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:project_id: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ProjectId)); err != nil {
		return fmt.Errorf("%T.project_id (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:project_id: %s", p, err)
	}
	return err
}

func (p *CreateGroupArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:key: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return fmt.Errorf("%T.key (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:key: %s", p, err)
	}
	return err
}

func (p *CreateGroupArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("group_id", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:group_id: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.GroupId)); err != nil {
		return fmt.Errorf("%T.group_id (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:group_id: %s", p, err)
	}
	return err
}

func (p *CreateGroupArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("group_name", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:group_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.GroupName)); err != nil {
		return fmt.Errorf("%T.group_name (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:group_name: %s", p, err)
	}
	return err
}

func (p *CreateGroupArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateGroupArgs(%+v)", *p)
}

type CreateGroupResult struct {
	Success *int64                `thrift:"success,0" json:"success"`
	Ex      *ServerGatedException `thrift:"ex,1" json:"ex"`
}

func NewCreateGroupResult() *CreateGroupResult {
	return &CreateGroupResult{}
}

var CreateGroupResult_Success_DEFAULT int64

func (p *CreateGroupResult) GetSuccess() int64 {
	if !p.IsSetSuccess() {
		return CreateGroupResult_Success_DEFAULT
	}
	return *p.Success
}

var CreateGroupResult_Ex_DEFAULT *ServerGatedException

func (p *CreateGroupResult) GetEx() *ServerGatedException {
	if !p.IsSetEx() {
		return CreateGroupResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *CreateGroupResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateGroupResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *CreateGroupResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CreateGroupResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *CreateGroupResult) ReadField1(iprot thrift.TProtocol) error {
	p.Ex = &ServerGatedException{}
	if err := p.Ex.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Ex, err)
	}
	return nil
}

func (p *CreateGroupResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("create_group_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *CreateGroupResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *CreateGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:ex: %s", p, err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Ex, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:ex: %s", p, err)
		}
	}
	return err
}

func (p *CreateGroupResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateGroupResult(%+v)", *p)
}

type DeleteGroupArgs struct {
	ProjectId int32  `thrift:"project_id,1" json:"project_id"`
	Key       string `thrift:"key,2" json:"key"`
	GroupId   int64  `thrift:"group_id,3" json:"group_id"`
}

func NewDeleteGroupArgs() *DeleteGroupArgs {
	return &DeleteGroupArgs{}
}

func (p *DeleteGroupArgs) GetProjectId() int32 {
	return p.ProjectId
}

func (p *DeleteGroupArgs) GetKey() string {
	return p.Key
}

func (p *DeleteGroupArgs) GetGroupId() int64 {
	return p.GroupId
}
func (p *DeleteGroupArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeleteGroupArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ProjectId = v
	}
	return nil
}

func (p *DeleteGroupArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Key = v
	}
	return nil
}

func (p *DeleteGroupArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.GroupId = v
	}
	return nil
}

func (p *DeleteGroupArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("delete_group_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeleteGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("project_id", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:project_id: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ProjectId)); err != nil {
		return fmt.Errorf("%T.project_id (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:project_id: %s", p, err)
	}
	return err
}

func (p *DeleteGroupArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:key: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return fmt.Errorf("%T.key (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:key: %s", p, err)
	}
	return err
}

func (p *DeleteGroupArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("group_id", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:group_id: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.GroupId)); err != nil {
		return fmt.Errorf("%T.group_id (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:group_id: %s", p, err)
	}
	return err
}

func (p *DeleteGroupArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteGroupArgs(%+v)", *p)
}

type DeleteGroupResult struct {
	Ex *ServerGatedException `thrift:"ex,1" json:"ex"`
}

func NewDeleteGroupResult() *DeleteGroupResult {
	return &DeleteGroupResult{}
}

var DeleteGroupResult_Ex_DEFAULT *ServerGatedException

func (p *DeleteGroupResult) GetEx() *ServerGatedException {
	if !p.IsSetEx() {
		return DeleteGroupResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *DeleteGroupResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *DeleteGroupResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeleteGroupResult) ReadField1(iprot thrift.TProtocol) error {
	p.Ex = &ServerGatedException{}
	if err := p.Ex.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Ex, err)
	}
	return nil
}

func (p *DeleteGroupResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("delete_group_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeleteGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:ex: %s", p, err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Ex, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:ex: %s", p, err)
		}
	}
	return err
}

func (p *DeleteGroupResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteGroupResult(%+v)", *p)
}

type JoinGroupArgs struct {
	ProjectId int32  `thrift:"project_id,1" json:"project_id"`
	Key       string `thrift:"key,2" json:"key"`
	GroupId   int64  `thrift:"group_id,3" json:"group_id"`
	Who       int64  `thrift:"who,4" json:"who"`
}

func NewJoinGroupArgs() *JoinGroupArgs {
	return &JoinGroupArgs{}
}

func (p *JoinGroupArgs) GetProjectId() int32 {
	return p.ProjectId
}

func (p *JoinGroupArgs) GetKey() string {
	return p.Key
}

func (p *JoinGroupArgs) GetGroupId() int64 {
	return p.GroupId
}

func (p *JoinGroupArgs) GetWho() int64 {
	return p.Who
}
func (p *JoinGroupArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *JoinGroupArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ProjectId = v
	}
	return nil
}

func (p *JoinGroupArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Key = v
	}
	return nil
}

func (p *JoinGroupArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.GroupId = v
	}
	return nil
}

func (p *JoinGroupArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Who = v
	}
	return nil
}

func (p *JoinGroupArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("join_group_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *JoinGroupArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("project_id", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:project_id: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ProjectId)); err != nil {
		return fmt.Errorf("%T.project_id (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:project_id: %s", p, err)
	}
	return err
}

func (p *JoinGroupArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:key: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return fmt.Errorf("%T.key (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:key: %s", p, err)
	}
	return err
}

func (p *JoinGroupArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("group_id", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:group_id: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.GroupId)); err != nil {
		return fmt.Errorf("%T.group_id (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:group_id: %s", p, err)
	}
	return err
}

func (p *JoinGroupArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("who", thrift.I64, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:who: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Who)); err != nil {
		return fmt.Errorf("%T.who (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:who: %s", p, err)
	}
	return err
}

func (p *JoinGroupArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("JoinGroupArgs(%+v)", *p)
}

type JoinGroupResult struct {
	Success *int64                `thrift:"success,0" json:"success"`
	Ex      *ServerGatedException `thrift:"ex,1" json:"ex"`
}

func NewJoinGroupResult() *JoinGroupResult {
	return &JoinGroupResult{}
}

var JoinGroupResult_Success_DEFAULT int64

func (p *JoinGroupResult) GetSuccess() int64 {
	if !p.IsSetSuccess() {
		return JoinGroupResult_Success_DEFAULT
	}
	return *p.Success
}

var JoinGroupResult_Ex_DEFAULT *ServerGatedException

func (p *JoinGroupResult) GetEx() *ServerGatedException {
	if !p.IsSetEx() {
		return JoinGroupResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *JoinGroupResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *JoinGroupResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *JoinGroupResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *JoinGroupResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *JoinGroupResult) ReadField1(iprot thrift.TProtocol) error {
	p.Ex = &ServerGatedException{}
	if err := p.Ex.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Ex, err)
	}
	return nil
}

func (p *JoinGroupResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("join_group_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *JoinGroupResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteI64(int64(*p.Success)); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *JoinGroupResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:ex: %s", p, err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Ex, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:ex: %s", p, err)
		}
	}
	return err
}

func (p *JoinGroupResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("JoinGroupResult(%+v)", *p)
}

type GroupChangedArgs struct {
	ProjectId int32   `thrift:"project_id,1" json:"project_id"`
	Key       string  `thrift:"key,2" json:"key"`
	Otype     int8    `thrift:"otype,3" json:"otype"`
	GroupId   int64   `thrift:"group_id,4" json:"group_id"`
	Uids      []int64 `thrift:"uids,5" json:"uids"`
}

func NewGroupChangedArgs() *GroupChangedArgs {
	return &GroupChangedArgs{}
}

func (p *GroupChangedArgs) GetProjectId() int32 {
	return p.ProjectId
}

func (p *GroupChangedArgs) GetKey() string {
	return p.Key
}

func (p *GroupChangedArgs) GetOtype() int8 {
	return p.Otype
}

func (p *GroupChangedArgs) GetGroupId() int64 {
	return p.GroupId
}

func (p *GroupChangedArgs) GetUids() []int64 {
	return p.Uids
}
func (p *GroupChangedArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GroupChangedArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ProjectId = v
	}
	return nil
}

func (p *GroupChangedArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Key = v
	}
	return nil
}

func (p *GroupChangedArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		temp := int8(v)
		p.Otype = temp
	}
	return nil
}

func (p *GroupChangedArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.GroupId = v
	}
	return nil
}

func (p *GroupChangedArgs) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]int64, 0, size)
	p.Uids = tSlice
	for i := 0; i < size; i++ {
		var _elem24 int64
		if v, err := iprot.ReadI64(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem24 = v
		}
		p.Uids = append(p.Uids, _elem24)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *GroupChangedArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("group_changed_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GroupChangedArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("project_id", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:project_id: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ProjectId)); err != nil {
		return fmt.Errorf("%T.project_id (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:project_id: %s", p, err)
	}
	return err
}

func (p *GroupChangedArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:key: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return fmt.Errorf("%T.key (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:key: %s", p, err)
	}
	return err
}

func (p *GroupChangedArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("otype", thrift.BYTE, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:otype: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.Otype)); err != nil {
		return fmt.Errorf("%T.otype (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:otype: %s", p, err)
	}
	return err
}

func (p *GroupChangedArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("group_id", thrift.I64, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:group_id: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.GroupId)); err != nil {
		return fmt.Errorf("%T.group_id (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:group_id: %s", p, err)
	}
	return err
}

func (p *GroupChangedArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uids", thrift.LIST, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:uids: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.Uids)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Uids {
		if err := oprot.WriteI64(int64(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:uids: %s", p, err)
	}
	return err
}

func (p *GroupChangedArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GroupChangedArgs(%+v)", *p)
}

type GroupChangedResult struct {
	Ex *ServerGatedException `thrift:"ex,1" json:"ex"`
}

func NewGroupChangedResult() *GroupChangedResult {
	return &GroupChangedResult{}
}

var GroupChangedResult_Ex_DEFAULT *ServerGatedException

func (p *GroupChangedResult) GetEx() *ServerGatedException {
	if !p.IsSetEx() {
		return GroupChangedResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *GroupChangedResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *GroupChangedResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GroupChangedResult) ReadField1(iprot thrift.TProtocol) error {
	p.Ex = &ServerGatedException{}
	if err := p.Ex.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Ex, err)
	}
	return nil
}

func (p *GroupChangedResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("group_changed_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GroupChangedResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:ex: %s", p, err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Ex, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:ex: %s", p, err)
		}
	}
	return err
}

func (p *GroupChangedResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GroupChangedResult(%+v)", *p)
}

type GetTokenArgs struct {
	ProjectId int32  `thrift:"project_id,1" json:"project_id"`
	Key       string `thrift:"key,2" json:"key"`
	Uid       int64  `thrift:"uid,3" json:"uid"`
}

func NewGetTokenArgs() *GetTokenArgs {
	return &GetTokenArgs{}
}

func (p *GetTokenArgs) GetProjectId() int32 {
	return p.ProjectId
}

func (p *GetTokenArgs) GetKey() string {
	return p.Key
}

func (p *GetTokenArgs) GetUid() int64 {
	return p.Uid
}
func (p *GetTokenArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetTokenArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ProjectId = v
	}
	return nil
}

func (p *GetTokenArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Key = v
	}
	return nil
}

func (p *GetTokenArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Uid = v
	}
	return nil
}

func (p *GetTokenArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_token_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetTokenArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("project_id", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:project_id: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ProjectId)); err != nil {
		return fmt.Errorf("%T.project_id (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:project_id: %s", p, err)
	}
	return err
}

func (p *GetTokenArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:key: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Key)); err != nil {
		return fmt.Errorf("%T.key (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:key: %s", p, err)
	}
	return err
}

func (p *GetTokenArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("uid", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:uid: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Uid)); err != nil {
		return fmt.Errorf("%T.uid (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:uid: %s", p, err)
	}
	return err
}

func (p *GetTokenArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTokenArgs(%+v)", *p)
}

type GetTokenResult struct {
	Success *Token                `thrift:"success,0" json:"success"`
	Ex      *ServerGatedException `thrift:"ex,1" json:"ex"`
}

func NewGetTokenResult() *GetTokenResult {
	return &GetTokenResult{}
}

var GetTokenResult_Success_DEFAULT *Token

func (p *GetTokenResult) GetSuccess() *Token {
	if !p.IsSetSuccess() {
		return GetTokenResult_Success_DEFAULT
	}
	return p.Success
}

var GetTokenResult_Ex_DEFAULT *ServerGatedException

func (p *GetTokenResult) GetEx() *ServerGatedException {
	if !p.IsSetEx() {
		return GetTokenResult_Ex_DEFAULT
	}
	return p.Ex
}
func (p *GetTokenResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetTokenResult) IsSetEx() bool {
	return p.Ex != nil
}

func (p *GetTokenResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetTokenResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &Token{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *GetTokenResult) ReadField1(iprot thrift.TProtocol) error {
	p.Ex = &ServerGatedException{}
	if err := p.Ex.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Ex, err)
	}
	return nil
}

func (p *GetTokenResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_token_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetTokenResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetTokenResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEx() {
		if err := oprot.WriteFieldBegin("ex", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:ex: %s", p, err)
		}
		if err := p.Ex.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Ex, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:ex: %s", p, err)
		}
	}
	return err
}

func (p *GetTokenResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTokenResult(%+v)", *p)
}
