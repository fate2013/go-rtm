// Autogenerated by Thrift Compiler (1.0.0-dev)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"flag"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"math"
	"net"
	"net/url"
	"os"
	"servergated"
	"strconv"
	"strings"
)

func Usage() {
	fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
	flag.PrintDefaults()
	fmt.Fprintln(os.Stderr, "\nFunctions:")
	fmt.Fprintln(os.Stderr, "  i32 send_msg(i32 project_id, string key, byte mtype, i64 from, i64 to, i64 mid, string message)")
	fmt.Fprintln(os.Stderr, "  i32 send_msgs(i32 project_id, string key, byte mtype, i64 from,  tos, i64 mid, string message)")
	fmt.Fprintln(os.Stderr, "  i32 send_group_msg(i32 project_id, string key, byte mtype, i64 from, i64 group_id, i64 mid, string message)")
	fmt.Fprintln(os.Stderr, "  i32 broadcast_msg(i32 project_id, string key, byte mtype, i64 from, i64 mid, string message)")
	fmt.Fprintln(os.Stderr, "  void broadcast_note(i32 project_id, string key, byte mtype, i64 from, string message)")
	fmt.Fprintln(os.Stderr, "  void send_note(i32 project_id, string key, byte mtype, i64 from, i64 to, string message)")
	fmt.Fprintln(os.Stderr, "  void send_notes(i32 project_id, string key, byte mtype, i64 from,  tos, string message)")
	fmt.Fprintln(os.Stderr, "  void send_group_note(i32 project_id, string key, byte mtype, i64 from, i64 group_id, string message)")
	fmt.Fprintln(os.Stderr, "  void friend_changed(i32 project_id, string key, byte otype,  uid_pair)")
	fmt.Fprintln(os.Stderr, "  i64 create_group(i32 project_id, string key, i64 group_id, string group_name)")
	fmt.Fprintln(os.Stderr, "  void delete_group(i32 project_id, string key, i64 group_id)")
	fmt.Fprintln(os.Stderr, "  i64 join_group(i32 project_id, string key, i64 group_id, i64 who)")
	fmt.Fprintln(os.Stderr, "  void group_changed(i32 project_id, string key, byte otype, i64 group_id,  uids)")
	fmt.Fprintln(os.Stderr, "  Token get_token(i32 project_id, string key, i64 uid)")
	fmt.Fprintln(os.Stderr, "  bool status()")
	fmt.Fprintln(os.Stderr, "   infos()")
	fmt.Fprintln(os.Stderr, "  void tune(string key, string value)")
	fmt.Fprintln(os.Stderr)
	os.Exit(0)
}

func main() {
	flag.Usage = Usage
	var host string
	var port int
	var protocol string
	var urlString string
	var framed bool
	var useHttp bool
	var parsedUrl url.URL
	var trans thrift.TTransport
	_ = strconv.Atoi
	_ = math.Abs
	flag.Usage = Usage
	flag.StringVar(&host, "h", "localhost", "Specify host and port")
	flag.IntVar(&port, "p", 9090, "Specify port")
	flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
	flag.StringVar(&urlString, "u", "", "Specify the url")
	flag.BoolVar(&framed, "framed", false, "Use framed transport")
	flag.BoolVar(&useHttp, "http", false, "Use http")
	flag.Parse()

	if len(urlString) > 0 {
		parsedUrl, err := url.Parse(urlString)
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
		host = parsedUrl.Host
		useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
	} else if useHttp {
		_, err := url.Parse(fmt.Sprint("http://", host, ":", port))
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
	}

	cmd := flag.Arg(0)
	var err error
	if useHttp {
		trans, err = thrift.NewTHttpClient(parsedUrl.String())
	} else {
		portStr := fmt.Sprint(port)
		if strings.Contains(host, ":") {
			host, portStr, err = net.SplitHostPort(host)
			if err != nil {
				fmt.Fprintln(os.Stderr, "error with host:", err)
				os.Exit(1)
			}
		}
		trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
		if err != nil {
			fmt.Fprintln(os.Stderr, "error resolving address:", err)
			os.Exit(1)
		}
		if framed {
			trans = thrift.NewTFramedTransport(trans)
		}
	}
	if err != nil {
		fmt.Fprintln(os.Stderr, "Error creating transport", err)
		os.Exit(1)
	}
	defer trans.Close()
	var protocolFactory thrift.TProtocolFactory
	switch protocol {
	case "compact":
		protocolFactory = thrift.NewTCompactProtocolFactory()
		break
	case "simplejson":
		protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
		break
	case "json":
		protocolFactory = thrift.NewTJSONProtocolFactory()
		break
	case "binary", "":
		protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
		Usage()
		os.Exit(1)
	}
	client := servergated.NewServerGatedServiceClientFactory(trans, protocolFactory)
	if err := trans.Open(); err != nil {
		fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
		os.Exit(1)
	}

	switch cmd {
	case "send_msg":
		if flag.NArg()-1 != 7 {
			fmt.Fprintln(os.Stderr, "SendMsg requires 7 args")
			flag.Usage()
		}
		tmp0, err25 := (strconv.Atoi(flag.Arg(1)))
		if err25 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err27 := (strconv.Atoi(flag.Arg(3)))
		if err27 != nil {
			Usage()
			return
		}
		argvalue2 := byte(tmp2)
		value2 := argvalue2
		argvalue3, err28 := (strconv.ParseInt(flag.Arg(4), 10, 64))
		if err28 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		argvalue4, err29 := (strconv.ParseInt(flag.Arg(5), 10, 64))
		if err29 != nil {
			Usage()
			return
		}
		value4 := argvalue4
		argvalue5, err30 := (strconv.ParseInt(flag.Arg(6), 10, 64))
		if err30 != nil {
			Usage()
			return
		}
		value5 := argvalue5
		argvalue6 := flag.Arg(7)
		value6 := argvalue6
		fmt.Print(client.SendMsg(value0, value1, value2, value3, value4, value5, value6))
		fmt.Print("\n")
		break
	case "send_msgs":
		if flag.NArg()-1 != 7 {
			fmt.Fprintln(os.Stderr, "SendMsgs requires 7 args")
			flag.Usage()
		}
		tmp0, err32 := (strconv.Atoi(flag.Arg(1)))
		if err32 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err34 := (strconv.Atoi(flag.Arg(3)))
		if err34 != nil {
			Usage()
			return
		}
		argvalue2 := byte(tmp2)
		value2 := argvalue2
		argvalue3, err35 := (strconv.ParseInt(flag.Arg(4), 10, 64))
		if err35 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		arg36 := flag.Arg(5)
		mbTrans37 := thrift.NewTMemoryBufferLen(len(arg36))
		defer mbTrans37.Close()
		_, err38 := mbTrans37.WriteString(arg36)
		if err38 != nil {
			Usage()
			return
		}
		factory39 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt40 := factory39.GetProtocol(mbTrans37)
		containerStruct4 := servergated.NewSendMsgsArgs()
		err41 := containerStruct4.ReadField5(jsProt40)
		if err41 != nil {
			Usage()
			return
		}
		argvalue4 := containerStruct4.Tos
		value4 := argvalue4
		argvalue5, err42 := (strconv.ParseInt(flag.Arg(6), 10, 64))
		if err42 != nil {
			Usage()
			return
		}
		value5 := argvalue5
		argvalue6 := flag.Arg(7)
		value6 := argvalue6
		fmt.Print(client.SendMsgs(value0, value1, value2, value3, value4, value5, value6))
		fmt.Print("\n")
		break
	case "send_group_msg":
		if flag.NArg()-1 != 7 {
			fmt.Fprintln(os.Stderr, "SendGroupMsg requires 7 args")
			flag.Usage()
		}
		tmp0, err44 := (strconv.Atoi(flag.Arg(1)))
		if err44 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err46 := (strconv.Atoi(flag.Arg(3)))
		if err46 != nil {
			Usage()
			return
		}
		argvalue2 := byte(tmp2)
		value2 := argvalue2
		argvalue3, err47 := (strconv.ParseInt(flag.Arg(4), 10, 64))
		if err47 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		argvalue4, err48 := (strconv.ParseInt(flag.Arg(5), 10, 64))
		if err48 != nil {
			Usage()
			return
		}
		value4 := argvalue4
		argvalue5, err49 := (strconv.ParseInt(flag.Arg(6), 10, 64))
		if err49 != nil {
			Usage()
			return
		}
		value5 := argvalue5
		argvalue6 := flag.Arg(7)
		value6 := argvalue6
		fmt.Print(client.SendGroupMsg(value0, value1, value2, value3, value4, value5, value6))
		fmt.Print("\n")
		break
	case "broadcast_msg":
		if flag.NArg()-1 != 6 {
			fmt.Fprintln(os.Stderr, "BroadcastMsg requires 6 args")
			flag.Usage()
		}
		tmp0, err51 := (strconv.Atoi(flag.Arg(1)))
		if err51 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err53 := (strconv.Atoi(flag.Arg(3)))
		if err53 != nil {
			Usage()
			return
		}
		argvalue2 := byte(tmp2)
		value2 := argvalue2
		argvalue3, err54 := (strconv.ParseInt(flag.Arg(4), 10, 64))
		if err54 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		argvalue4, err55 := (strconv.ParseInt(flag.Arg(5), 10, 64))
		if err55 != nil {
			Usage()
			return
		}
		value4 := argvalue4
		argvalue5 := flag.Arg(6)
		value5 := argvalue5
		fmt.Print(client.BroadcastMsg(value0, value1, value2, value3, value4, value5))
		fmt.Print("\n")
		break
	case "broadcast_note":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "BroadcastNote requires 5 args")
			flag.Usage()
		}
		tmp0, err57 := (strconv.Atoi(flag.Arg(1)))
		if err57 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err59 := (strconv.Atoi(flag.Arg(3)))
		if err59 != nil {
			Usage()
			return
		}
		argvalue2 := byte(tmp2)
		value2 := argvalue2
		argvalue3, err60 := (strconv.ParseInt(flag.Arg(4), 10, 64))
		if err60 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		argvalue4 := flag.Arg(5)
		value4 := argvalue4
		fmt.Print(client.BroadcastNote(value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "send_note":
		if flag.NArg()-1 != 6 {
			fmt.Fprintln(os.Stderr, "SendNote requires 6 args")
			flag.Usage()
		}
		tmp0, err62 := (strconv.Atoi(flag.Arg(1)))
		if err62 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err64 := (strconv.Atoi(flag.Arg(3)))
		if err64 != nil {
			Usage()
			return
		}
		argvalue2 := byte(tmp2)
		value2 := argvalue2
		argvalue3, err65 := (strconv.ParseInt(flag.Arg(4), 10, 64))
		if err65 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		argvalue4, err66 := (strconv.ParseInt(flag.Arg(5), 10, 64))
		if err66 != nil {
			Usage()
			return
		}
		value4 := argvalue4
		argvalue5 := flag.Arg(6)
		value5 := argvalue5
		fmt.Print(client.SendNote(value0, value1, value2, value3, value4, value5))
		fmt.Print("\n")
		break
	case "send_notes":
		if flag.NArg()-1 != 6 {
			fmt.Fprintln(os.Stderr, "SendNotes requires 6 args")
			flag.Usage()
		}
		tmp0, err68 := (strconv.Atoi(flag.Arg(1)))
		if err68 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err70 := (strconv.Atoi(flag.Arg(3)))
		if err70 != nil {
			Usage()
			return
		}
		argvalue2 := byte(tmp2)
		value2 := argvalue2
		argvalue3, err71 := (strconv.ParseInt(flag.Arg(4), 10, 64))
		if err71 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		arg72 := flag.Arg(5)
		mbTrans73 := thrift.NewTMemoryBufferLen(len(arg72))
		defer mbTrans73.Close()
		_, err74 := mbTrans73.WriteString(arg72)
		if err74 != nil {
			Usage()
			return
		}
		factory75 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt76 := factory75.GetProtocol(mbTrans73)
		containerStruct4 := servergated.NewSendNotesArgs()
		err77 := containerStruct4.ReadField5(jsProt76)
		if err77 != nil {
			Usage()
			return
		}
		argvalue4 := containerStruct4.Tos
		value4 := argvalue4
		argvalue5 := flag.Arg(6)
		value5 := argvalue5
		fmt.Print(client.SendNotes(value0, value1, value2, value3, value4, value5))
		fmt.Print("\n")
		break
	case "send_group_note":
		if flag.NArg()-1 != 6 {
			fmt.Fprintln(os.Stderr, "SendGroupNote requires 6 args")
			flag.Usage()
		}
		tmp0, err79 := (strconv.Atoi(flag.Arg(1)))
		if err79 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err81 := (strconv.Atoi(flag.Arg(3)))
		if err81 != nil {
			Usage()
			return
		}
		argvalue2 := byte(tmp2)
		value2 := argvalue2
		argvalue3, err82 := (strconv.ParseInt(flag.Arg(4), 10, 64))
		if err82 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		argvalue4, err83 := (strconv.ParseInt(flag.Arg(5), 10, 64))
		if err83 != nil {
			Usage()
			return
		}
		value4 := argvalue4
		argvalue5 := flag.Arg(6)
		value5 := argvalue5
		fmt.Print(client.SendGroupNote(value0, value1, value2, value3, value4, value5))
		fmt.Print("\n")
		break
	case "friend_changed":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "FriendChanged requires 4 args")
			flag.Usage()
		}
		tmp0, err85 := (strconv.Atoi(flag.Arg(1)))
		if err85 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err87 := (strconv.Atoi(flag.Arg(3)))
		if err87 != nil {
			Usage()
			return
		}
		argvalue2 := byte(tmp2)
		value2 := argvalue2
		arg88 := flag.Arg(4)
		mbTrans89 := thrift.NewTMemoryBufferLen(len(arg88))
		defer mbTrans89.Close()
		_, err90 := mbTrans89.WriteString(arg88)
		if err90 != nil {
			Usage()
			return
		}
		factory91 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt92 := factory91.GetProtocol(mbTrans89)
		containerStruct3 := servergated.NewFriendChangedArgs()
		err93 := containerStruct3.ReadField4(jsProt92)
		if err93 != nil {
			Usage()
			return
		}
		argvalue3 := containerStruct3.UidPair
		value3 := argvalue3
		fmt.Print(client.FriendChanged(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "create_group":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "CreateGroup requires 4 args")
			flag.Usage()
		}
		tmp0, err94 := (strconv.Atoi(flag.Arg(1)))
		if err94 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2, err96 := (strconv.ParseInt(flag.Arg(3), 10, 64))
		if err96 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		argvalue3 := flag.Arg(4)
		value3 := argvalue3
		fmt.Print(client.CreateGroup(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "delete_group":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "DeleteGroup requires 3 args")
			flag.Usage()
		}
		tmp0, err98 := (strconv.Atoi(flag.Arg(1)))
		if err98 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2, err100 := (strconv.ParseInt(flag.Arg(3), 10, 64))
		if err100 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.DeleteGroup(value0, value1, value2))
		fmt.Print("\n")
		break
	case "join_group":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "JoinGroup requires 4 args")
			flag.Usage()
		}
		tmp0, err101 := (strconv.Atoi(flag.Arg(1)))
		if err101 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2, err103 := (strconv.ParseInt(flag.Arg(3), 10, 64))
		if err103 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		argvalue3, err104 := (strconv.ParseInt(flag.Arg(4), 10, 64))
		if err104 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.JoinGroup(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "group_changed":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "GroupChanged requires 5 args")
			flag.Usage()
		}
		tmp0, err105 := (strconv.Atoi(flag.Arg(1)))
		if err105 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		tmp2, err107 := (strconv.Atoi(flag.Arg(3)))
		if err107 != nil {
			Usage()
			return
		}
		argvalue2 := byte(tmp2)
		value2 := argvalue2
		argvalue3, err108 := (strconv.ParseInt(flag.Arg(4), 10, 64))
		if err108 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		arg109 := flag.Arg(5)
		mbTrans110 := thrift.NewTMemoryBufferLen(len(arg109))
		defer mbTrans110.Close()
		_, err111 := mbTrans110.WriteString(arg109)
		if err111 != nil {
			Usage()
			return
		}
		factory112 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt113 := factory112.GetProtocol(mbTrans110)
		containerStruct4 := servergated.NewGroupChangedArgs()
		err114 := containerStruct4.ReadField5(jsProt113)
		if err114 != nil {
			Usage()
			return
		}
		argvalue4 := containerStruct4.Uids
		value4 := argvalue4
		fmt.Print(client.GroupChanged(value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "get_token":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetToken requires 3 args")
			flag.Usage()
		}
		tmp0, err115 := (strconv.Atoi(flag.Arg(1)))
		if err115 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		argvalue2, err117 := (strconv.ParseInt(flag.Arg(3), 10, 64))
		if err117 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.GetToken(value0, value1, value2))
		fmt.Print("\n")
		break
	case "status":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "Status requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.Status())
		fmt.Print("\n")
		break
	case "infos":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "Infos requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.Infos())
		fmt.Print("\n")
		break
	case "tune":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "Tune requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.Tune(value0, value1))
		fmt.Print("\n")
		break
	case "":
		Usage()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
	}
}
